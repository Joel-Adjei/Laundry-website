--------------------#Book-----------------------------------
import React, { useState } from 'react';

// Main App component
const App = () => {
  // State to manage form data
  const [formData, setFormData] = useState({
    name: '',
    location: '', // New state for main location (Accra/Legon UG)
    locationDetail: '', // New state for hall or city/town
    roomNumber: '',
    phoneNumber: '',
    basketSize: '',
    price: 0,
  });

  // State to manage the current step in the process: 'form', 'payment', 'confirmation'
  const [currentStep, setCurrentStep] = useState('form');

  // State to manage form submission message or payment confirmation message
  const [message, setMessage] = useState('');

  // State for payment details
  const [paymentDetails, setPaymentDetails] = useState({
    mobileMoneyNumber: '',
    network: '',
  });

  // Data for halls and cities/towns
  const legonHalls = [
    'Commonwealth Hall',
    'Volta Hall',
    'Sarbah Hall',
    'Akuafo Hall',
    'Legon Hall',
    'Jubilee Hall',
    'African Union Hall (Pentagon)',
    'Valco Trust Hall',
    'Limann Hall',
    'Hilla Limann Hall',
    'Elizabeth Sey Hall',
    'Jean Nelson Aka Hall',
    // Add more halls as needed
  ];

  const accraCitiesTowns = [
    'Accra Central',
    'Tema',
    'Madina',
    'Osu',
    'Labadi',
    'East Legon',
    'Lapaz',
    'Dansoman',
    'Spintex',
    'Achimota',
    // Add more cities/towns as needed
  ];

  // Laundry basket sizes and their details (price and placeholder image URL)
  const basketSizes = [
    {
      id: 'small',
      name: 'Small Basket',
      price: 15.00,
      imageUrl: 'https://placehold.co/100x100/A7F3D0/065F46?text=Small', // Placeholder for small basket
    },
    {
      id: 'medium',
      name: 'Medium Basket',
      price: 25.00,
      imageUrl: 'https://placehold.co/100x100/FDE68A/92400E?text=Medium', // Placeholder for medium basket
    },
    {
      id: 'large',
      name: 'Large Basket',
      price: 35.00,
      imageUrl: 'https://placehold.co/100x100/FECACA/7F1D1D?text=Large', // Placeholder for large basket
    },
  ];

  // Mobile Money Networks
  const mobileMoneyNetworks = ['MTN', 'Telecel', 'AirtelTigo'];

  // Handle input changes for general form fields
  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData({
      ...formData,
      [name]: value,
    });
  };

  // Handle location change (Accra/Legon UG)
  const handleLocationChange = (e) => {
    const { value } = e.target;
    setFormData({
      ...formData,
      location: value,
      locationDetail: '', // Reset sub-location when main location changes
      roomNumber: value === 'Legon UG' ? formData.roomNumber : '', // Only keep room number if Legon UG is selected
    });
  };

  // Handle basket size selection
  const handleBasketSelect = (basket) => {
    setFormData({
      ...formData,
      basketSize: basket.id,
      price: basket.price,
    });
  };

  // Handle input changes for payment details
  const handlePaymentChange = (e) => {
    const { name, value } = e.target;
    setPaymentDetails({
      ...paymentDetails,
      [name]: value,
    });
  };

  // Handle initial form submission
  const handleSubmit = (e) => {
    e.preventDefault();
    // Basic validation for the form fields before proceeding to payment
    if (!formData.name || !formData.location || !formData.locationDetail || !formData.phoneNumber || !formData.basketSize) {
      setMessage('Please fill in all required fields and select a basket size.');
      setTimeout(() => setMessage(''), 5000);
      return;
    }
    if (formData.location === 'Legon UG' && !formData.roomNumber) {
        setMessage('Please enter your Room Number for Legon UG.');
        setTimeout(() => setMessage(''), 5000);
        return;
    }

    // If all validations pass, move to the payment step
    setCurrentStep('payment');
    setMessage(''); // Clear any previous messages
  };

  // Handle payment submission
  const handlePaymentSubmit = (e) => {
    e.preventDefault();
    // Basic validation for payment details
    if (!paymentDetails.mobileMoneyNumber || !paymentDetails.network) {
      setMessage('Please enter your Mobile Money number and select a network.');
      setTimeout(() => setMessage(''), 5000);
      return;
    }

    // Simulate payment processing
    console.log('Processing payment:', {
      amount: (formData.price / 2).toFixed(2),
      ...paymentDetails,
      order: formData,
    });
    setMessage('Payment processing... Please confirm the transaction on your phone.');
    
    // Simulate a delay for payment confirmation
    setTimeout(() => {
      setMessage('Your 50% deposit has been received! Your order is confirmed.');
      setCurrentStep('confirmation'); // Move to confirmation step
    }, 3000); // 3 seconds delay for simulation
  };

  // Reset form to start a new order
  const startNewOrder = () => {
    setFormData({
      name: '',
      location: '',
      locationDetail: '',
      roomNumber: '',
      phoneNumber: '',
      basketSize: '',
      price: 0,
    });
    setPaymentDetails({
      mobileMoneyNumber: '',
      network: '',
    });
    setMessage('');
    setCurrentStep('form');
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-100 to-indigo-200 flex items-center justify-center p-4 sm:p-6 lg:p-8 font-sans">
      <div className="bg-white p-6 sm:p-8 rounded-2xl shadow-xl w-full max-w-lg border border-blue-200">
        <h1 className="text-3xl sm:text-4xl font-extrabold text-center text-indigo-700 mb-6 sm:mb-8 tracking-tight">
          Laundry Booking
        </h1>

        {/* Message Display (Success/Error/Info) */}
        {message && (
          <div className={`
            ${currentStep === 'confirmation' ? 'bg-green-100 border-green-400 text-green-700' : 'bg-yellow-100 border-yellow-400 text-yellow-700'}
            px-4 py-3 rounded-lg relative mb-6
          `}>
            <strong className="font-bold">Info!</strong>
            <span className="block sm:inline ml-2">{message}</span>
          </div>
        )}

        {/* Form Step */}
        {currentStep === 'form' && (
          <form onSubmit={handleSubmit} className="space-y-5">
            {/* Personal Information Section */}
            <div className="bg-blue-50 p-4 rounded-xl shadow-inner border border-blue-200">
              <h2 className="text-xl font-semibold text-blue-800 mb-4">Your Details</h2>
              <div>
                <label htmlFor="name" className="block text-sm font-medium text-gray-700 mb-1">
                  Full Name
                </label>
                <input
                  type="text"
                  id="name"
                  name="name"
                  value={formData.name}
                  onChange={handleChange}
                  required
                  className="w-full px-4 py-2 border border-gray-300 rounded-lg shadow-sm focus:ring-indigo-500 focus:border-indigo-500 transition duration-200 ease-in-out placeholder-gray-400"
                  placeholder="John Doe"
                />
              </div>

              {/* Location Selection */}
              <div>
                <label htmlFor="location" className="block text-sm font-medium text-gray-700 mb-1 mt-3">
                  Location
                </label>
                <select
                  id="location"
                  name="location"
                  value={formData.location}
                  onChange={handleLocationChange}
                  required
                  className="w-full px-4 py-2 border border-gray-300 rounded-lg shadow-sm focus:ring-indigo-500 focus:border-indigo-500 transition duration-200 ease-in-out"
                >
                  <option value="">Select Location</option>
                  <option value="Accra">Accra</option>
                  <option value="Legon UG">Legon UG</option>
                </select>
              </div>

              {/* Conditional Sub-location Dropdown */}
              {formData.location === 'Legon UG' && (
                <div>
                  <label htmlFor="locationDetail" className="block text-sm font-medium text-gray-700 mb-1 mt-3">
                    Hall of Residence
                  </label>
                  <select
                    id="locationDetail"
                    name="locationDetail"
                    value={formData.locationDetail}
                    onChange={handleChange}
                    required
                    className="w-full px-4 py-2 border border-gray-300 rounded-lg shadow-sm focus:ring-indigo-500 focus:border-indigo-500 transition duration-200 ease-in-out"
                  >
                    <option value="">Select Hall</option>
                    {legonHalls.map((hall) => (
                      <option key={hall} value={hall}>
                        {hall}
                      </option>
                    ))}
                  </select>
                </div>
              )}

              {formData.location === 'Accra' && (
                <div>
                  <label htmlFor="locationDetail" className="block text-sm font-medium text-gray-700 mb-1 mt-3">
                    City/Town in Accra
                  </label>
                  <select
                    id="locationDetail"
                    name="locationDetail"
                    value={formData.locationDetail}
                    onChange={handleChange}
                    required
                    className="w-full px-4 py-2 border border-gray-300 rounded-lg shadow-sm focus:ring-indigo-500 focus:border-indigo-500 transition duration-200 ease-in-out"
                  >
                    <option value="">Select City/Town</option>
                    {accraCitiesTowns.map((city) => (
                      <option key={city} value={city}>
                        {city}
                      </option>
                    ))}
                  </select>
                </div>
              )}

              {/* Room Number (only required for Legon UG) */}
              {formData.location === 'Legon UG' && (
                <div>
                  <label htmlFor="roomNumber" className="block text-sm font-medium text-gray-700 mb-1 mt-3">
                    Room Number
                  </label>
                  <input
                    type="text"
                    id="roomNumber"
                    name="roomNumber"
                    value={formData.roomNumber}
                    onChange={handleChange}
                    required={formData.location === 'Legon UG'} // Required only for Legon UG
                    className="w-full px-4 py-2 border border-gray-300 rounded-lg shadow-sm focus:ring-indigo-500 focus:border-indigo-500 transition duration-200 ease-in-out placeholder-gray-400"
                    placeholder="Eg. 101A"
                  />
                </div>
              )}

              <div>
                <label htmlFor="phoneNumber" className="block text-sm font-medium text-gray-700 mb-1 mt-3">
                  Telephone Number
                </label>
                <input
                  type="tel"
                  id="phoneNumber"
                  name="phoneNumber"
                  value={formData.phoneNumber}
                  onChange={handleChange}
                  required
                  className="w-full px-4 py-2 border border-gray-300 rounded-lg shadow-sm focus:ring-indigo-500 focus:border-indigo-500 transition duration-200 ease-in-out placeholder-gray-400"
                  placeholder="Eg. +233 24 123 4567"
                />
              </div>
            </div>

            {/* Laundry Basket Size Selection Section */}
            <div className="bg-purple-50 p-4 rounded-xl shadow-inner border border-purple-200">
              <h2 className="text-xl font-semibold text-purple-800 mb-4">Choose Basket Size</h2>
              <div className="grid grid-cols-1 sm:grid-cols-3 gap-4">
                {basketSizes.map((basket) => (
                  <div
                    key={basket.id}
                    onClick={() => handleBasketSelect(basket)}
                    className={`cursor-pointer border-2 rounded-xl p-4 flex flex-col items-center justify-center transition duration-300 ease-in-out transform hover:scale-105 hover:shadow-lg
                      ${formData.basketSize === basket.id ? 'border-indigo-500 bg-indigo-50 shadow-md' : 'border-gray-200 bg-white'}
                    `}
                  >
                    <img
                      src={basket.imageUrl}
                      alt={`${basket.name} Laundry Basket`}
                      className="w-24 h-24 mb-3 rounded-lg object-cover"
                      onError={(e) => { e.target.onerror = null; e.target.src="https://placehold.co/100x100/CCCCCC/666666?text=Image+Error"; }} // Fallback image on error
                    />
                    <span className="text-lg font-medium text-gray-800">{basket.name}</span>
                    <span className="text-xl font-bold text-indigo-600 mt-1">GHS {basket.price.toFixed(2)}</span>
                  </div>
                ))}
              </div>
              {/* Display selected basket and price */}
              {formData.basketSize && (
                <div className="mt-5 text-center text-lg font-semibold text-gray-700 p-3 bg-gray-100 rounded-lg border border-gray-200">
                  Selected: <span className="text-indigo-600">{basketSizes.find(b => b.id === formData.basketSize)?.name}</span> - Total: <span className="text-green-600">GHS {formData.price.toFixed(2)}</span>
                </div>
              )}
              {!formData.basketSize && (
                <p className="mt-5 text-center text-gray-500 text-sm">Please select a basket size to see the price.</p>
              )}
            </div>

            {/* Submit Button */}
            <button
              type="submit"
              className="w-full bg-indigo-600 text-white py-3 rounded-lg font-semibold text-lg shadow-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 transition duration-300 ease-in-out transform hover:scale-105"
            >
              Proceed to Payment
            </button>
          </form>
        )}

        {/* Payment Step */}
        {currentStep === 'payment' && (
          <div className="bg-green-50 p-6 rounded-xl shadow-inner border border-green-200">
            <h2 className="text-2xl font-bold text-green-800 mb-4 text-center">Payment Details</h2>
            <p className="text-center text-lg mb-6 text-gray-700">
              A 50% deposit of{' '}
              <span className="font-extrabold text-3xl text-green-600">
                GHS {(formData.price / 2).toFixed(2)}
              </span>{' '}
              is required to confirm your order.
            </p>

            <form onSubmit={handlePaymentSubmit} className="space-y-4">
              <div>
                <label htmlFor="mobileMoneyNumber" className="block text-sm font-medium text-gray-700 mb-1">
                  Mobile Money Number
                </label>
                <input
                  type="tel"
                  id="mobileMoneyNumber"
                  name="mobileMoneyNumber"
                  value={paymentDetails.mobileMoneyNumber}
                  onChange={handlePaymentChange}
                  required
                  className="w-full px-4 py-2 border border-gray-300 rounded-lg shadow-sm focus:ring-green-500 focus:border-green-500 transition duration-200 ease-in-out placeholder-gray-400"
                  placeholder="Eg. 024xxxxxxx or +23324xxxxxxx"
                />
              </div>
              <div>
                <label htmlFor="network" className="block text-sm font-medium text-gray-700 mb-1">
                  Mobile Money Network
                </label>
                <select
                  id="network"
                  name="network"
                  value={paymentDetails.network}
                  onChange={handlePaymentChange}
                  required
                  className="w-full px-4 py-2 border border-gray-300 rounded-lg shadow-sm focus:ring-green-500 focus:border-green-500 transition duration-200 ease-in-out"
                >
                  <option value="">Select Network</option>
                  {mobileMoneyNetworks.map((network) => (
                    <option key={network} value={network}>
                      {network}
                    </option>
                  ))}
                </select>
              </div>
              <button
                type="submit"
                className="w-full bg-green-600 text-white py-3 rounded-lg font-semibold text-lg shadow-md hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 transition duration-300 ease-in-out transform hover:scale-105"
              >
                Pay GHS {(formData.price / 2).toFixed(2)}
              </button>
              <button
                type="button"
                onClick={() => setCurrentStep('form')}
                className="w-full mt-3 bg-gray-300 text-gray-800 py-3 rounded-lg font-semibold text-lg shadow-md hover:bg-gray-400 focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-offset-2 transition duration-300 ease-in-out"
              >
                Back to Order Form
              </button>
            </form>
          </div>
        )}

        {/* Confirmation Step */}
        {currentStep === 'confirmation' && (
          <div className="bg-indigo-50 p-6 rounded-xl shadow-inner border border-indigo-200 text-center">
            <svg
              className="mx-auto h-24 w-24 text-indigo-500"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth="2"
                d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"
              ></path>
            </svg>
            <h2 className="text-2xl font-bold text-indigo-800 mt-4 mb-2">Order Confirmed!</h2>
            <p className="text-lg text-gray-700 mb-4">
              Your laundry order has been successfully placed and the 50% deposit received.
            </p>
            <p className="text-md text-gray-600">
              You will be contacted shortly for pickup arrangements.
            </p>
            <button
              onClick={startNewOrder}
              className="w-full mt-6 bg-indigo-600 text-white py-3 rounded-lg font-semibold text-lg shadow-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 transition duration-300 ease-in-out transform hover:scale-105"
            >
              Start New Order
            </button>
          </div>
        )}
      </div>
    </div>
  );
};

export default App;


--------------------------------------#contact------------------------------------------------
import React from 'react';

// Main App component for the contact page
const App = () => {
  return (
    <div className="min-h-screen bg-gray-100 font-sans antialiased flex flex-col items-center p-4">
      {/* Page Header */}
      <header className="w-full max-w-4xl bg-white shadow-md rounded-lg p-6 mb-8 text-center">
        <h1 className="text-4xl font-bold text-gray-800 mb-2 rounded-lg">Contact Us</h1>
        <p className="text-gray-600 text-lg">We'd love to hear from you!</p>
      </header>

      {/* Main Content Area */}
      <main className="w-full max-w-4xl bg-white shadow-md rounded-lg p-8 grid grid-cols-1 md:grid-cols-2 gap-8 mb-8">
        {/* Contact Information Section */}
        <section className="flex flex-col justify-center">
          <h2 className="text-3xl font-semibold text-gray-800 mb-6 pb-2 border-b-2 border-indigo-500 rounded-lg">Our Details</h2>
          <div className="space-y-4">
            <div className="flex items-center text-gray-700">
              <svg className="w-6 h-6 text-indigo-500 mr-3" fill="currentColor" viewBox="0 0 20 20">
                <path fillRule="evenodd" d="M5.05 4.05a7 7 0 119.9 9.9L10 18.9l-4.95-4.95a7 7 0 010-9.9zM10 11a2 2 0 100-4 2 2 0 000 4z" clipRule="evenodd" />
              </svg>
              <p className="text-lg">123 Laundry Lane, Accra, Ghana</p>
            </div>
            <div className="flex items-center text-gray-700">
              <svg className="w-6 h-6 text-indigo-500 mr-3" fill="currentColor" viewBox="0 0 20 20">
                <path d="M2 3a1 1 0 011-1h2.153a1 1 0 01.986.836l.74 4.435a1 1 0 01-.54 1.06l-1.548.774a11.037 11.037 0 006.105 6.105l.774-1.548a1 1 0 011.059-.54l4.435.74a1 1 0 01.836.986V17a1 1 0 01-1 1h-2C7.82 18 2 12.18 2 5V3z" />
              </svg>
              <p className="text-lg">+233 24 123 4567</p>
            </div>
            <div className="flex items-center text-gray-700">
              <svg className="w-6 h-6 text-indigo-500 mr-3" fill="currentColor" viewBox="0 0 20 20">
                <path d="M2.003 5.884L10 9.882l7.997-3.998A2 2 0 0016 4H4a2 2 0 00-1.997 1.884z" />
                <path d="M18 8.118l-8 4-8-4V14a2 2 0 002 2h12a2 2 0 002-2V8.118z" />
              </svg>
              <p className="text-lg">info@laundryservice.com</p>
            </div>
          </div>
        </section>

        {/* Google Map Section */}
        <section className="w-full h-80 md:h-auto overflow-hidden rounded-lg shadow-inner">
          <h2 className="text-3xl font-semibold text-gray-800 mb-6 pb-2 border-b-2 border-indigo-500 rounded-lg hidden md:block">Find Us</h2>
          <iframe
            title="Google Map Location"
            src="https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d3970.6380608779943!2d-0.1870636848135837!3d5.568478995963779!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0xfdf9a1b9e1d871b%3A0x6b4c10c6d3b2e5d!2sAccra%2C%20Ghana!5e0!3m2!1sen!2sgh!4v1678912345678!5m2!1sen!2sgh"
            width="100%"
            height="100%"
            style={{ border: 0, borderRadius: '8px' }}
            allowFullScreen=""
            loading="lazy"
            referrerPolicy="no-referrer-when-downgrade"
          ></iframe>
        </section>
      </main>

      {/* Footer */}
      <footer className="w-full max-w-4xl text-center text-gray-500 text-sm mt-8 p-4">
        &copy; {new Date().getFullYear()} Laundry Service. All rights reserved.
      </footer>
    </div>
  );
};

export default App;


---------------------------------------------------------------------------------------
 
---------------------------------------------------------------------------------------------------------

import React, { useState } from 'react';
import { Formik, Form, Field, ErrorMessage } from 'formik';
import * as Yup from 'yup';

// Main App component
const App = () => {
  // State to manage the current step in the process: 'form', 'payment', 'confirmation'
  const [currentStep, setCurrentStep] = useState('form');

  // State to manage form submission message or payment confirmation message
  const [message, setMessage] = useState('');

  // Data for halls and cities/towns
  const legonHalls = [
    'Commonwealth Hall',
    'Volta Hall',
    'Sarbah Hall',
    'Akuafo Hall',
    'Legon Hall',
    'Jubilee Hall',
    'African Union Hall (Pentagon)',
    'Valco Trust Hall',
    'Limann Hall',
    'Hilla Limann Hall',
    'Elizabeth Sey Hall',
    'Jean Nelson Aka Hall',
  ];

  const accraCitiesTowns = [
    'Accra Central',
    'Tema',
    'Madina',
    'Osu',
    'Labadi',
    'East Legon',
    'Lapaz',
    'Dansoman',
    'Spintex',
    'Achimota',
  ];

  // Laundry basket sizes and their details (price and placeholder image URL)
  const basketSizes = [
    {
      id: 'small',
      name: 'Small Basket',
      price: 15.00,
      imageUrl: 'https://placehold.co/100x100/A7F3D0/065F46?text=Small',
    },
    {
      id: 'medium',
      name: 'Medium Basket',
      price: 25.00,
      imageUrl: 'https://placehold.co/100x100/FDE68A/92400E?text=Medium',
    },
    {
      id: 'large',
      name: 'Large Basket',
      price: 35.00,
      imageUrl: 'https://placehold.co/100x100/FECACA/7F1D1D?text=Large',
    },
  ];

  // Mobile Money Networks
  const mobileMoneyNetworks = ['MTN', 'Telecel', 'AirtelTigo'];

  // Initial values for the Formik form
  const initialFormValues = {
    name: '',
    location: '',
    locationDetail: '',
    roomNumber: '',
    phoneNumber: '',
    basketSize: '',
    price: 0, // This will be set dynamically, but needs an initial value for Formik
  };

  const initialPaymentValues = {
    mobileMoneyNumber: '',
    network: '',
  };

  // Validation schema for the order form step using Yup
  const orderValidationSchema = Yup.object().shape({
    name: Yup.string().required('Full Name is required'),
    location: Yup.string().required('Location is required'),
    locationDetail: Yup.string().required('Hall/City/Town is required'),
    roomNumber: Yup.string().when('location', {
      is: 'Legon UG',
      then: (schema) => schema.required('Room Number is required for Legon UG'),
      otherwise: (schema) => schema.notRequired(),
    }),
    phoneNumber: Yup.string()
      .matches(/^[0-9+]{8,15}$/, 'Invalid phone number format')
      .required('Telephone Number is required'),
    basketSize: Yup.string().required('Please select a basket size'),
    price: Yup.number().min(1, 'Please select a basket size').required(),
  });

  // Validation schema for the payment form step using Yup
  const paymentValidationSchema = Yup.object().shape({
    mobileMoneyNumber: Yup.string()
      .matches(/^[0-9+]{8,15}$/, 'Invalid mobile money number format')
      .required('Mobile Money Number is required'),
    network: Yup.string().required('Network is required'),
  });

  // Handle initial form submission (move to payment step)
  const handleOrderSubmit = (values, { setSubmitting }) => {
    // console.log('Order Details:', values);
    setSubmitting(false);
    // Store final form values (including calculated price) to use on payment page
    setCurrentStep('payment');
    setMessage(''); // Clear any previous messages
  };

  // Handle payment submission
  const handlePaymentSubmit = (values, { setSubmitting }) => {
    // console.log('Processing payment:', {
    //   amount: (basketSizes.find(b => b.id === values.basketSize)?.price / 2).toFixed(2),
    //   ...values,
    // });

    setMessage('Payment processing... Please confirm the transaction on your phone.');
    setSubmitting(true);

    // Simulate a delay for payment confirmation
    setTimeout(() => {
      setMessage('Your 50% deposit has been received! Your order is confirmed.');
      setCurrentStep('confirmation'); // Move to confirmation step
      setSubmitting(false);
    }, 3000); // 3 seconds delay for simulation
  };

  // Reset form to start a new order
  const startNewOrder = () => {
    setMessage('');
    setCurrentStep('form');
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-100 to-indigo-200 flex items-center justify-center p-4 sm:p-6 lg:p-8 font-sans">
      <div className="bg-white p-6 sm:p-8 rounded-2xl shadow-xl w-full max-w-lg border border-blue-200">
        <h1 className="text-3xl sm:text-4xl font-extrabold text-center text-indigo-700 mb-6 sm:mb-8 tracking-tight">
          Laundry Booking
        </h1>

        {/* Message Display (Success/Error/Info) */}
        {message && (
          <div className={`
            ${currentStep === 'confirmation' ? 'bg-green-100 border-green-400 text-green-700' : 'bg-yellow-100 border-yellow-400 text-yellow-700'}
            px-4 py-3 rounded-lg relative mb-6
          `}>
            <strong className="font-bold">Info!</strong>
            <span className="block sm:inline ml-2">{message}</span>
          </div>
        )}

        {/* Form Step */}
        {currentStep === 'form' && (
          <Formik
            initialValues={initialFormValues}
            validationSchema={orderValidationSchema}
            onSubmit={handleOrderSubmit}
          >
            {({ values, setFieldValue, isSubmitting }) => (
              <Form className="space-y-5">
                {/* Personal Information Section */}
                <div className="bg-blue-50 p-4 rounded-xl shadow-inner border border-blue-200">
                  <h2 className="text-xl font-semibold text-blue-800 mb-4">Your Details</h2>
                  <div>
                    <label htmlFor="name" className="block text-sm font-medium text-gray-700 mb-1">
                      Full Name
                    </label>
                    <Field
                      type="text"
                      id="name"
                      name="name"
                      className="w-full px-4 py-2 border border-gray-300 rounded-lg shadow-sm focus:ring-indigo-500 focus:border-indigo-500 transition duration-200 ease-in-out placeholder-gray-400"
                      placeholder="John Doe"
                    />
                    <ErrorMessage name="name" component="div" className="text-red-500 text-sm mt-1" />
                  </div>

                  {/* Location Selection */}
                  <div>
                    <label htmlFor="location" className="block text-sm font-medium text-gray-700 mb-1 mt-3">
                      Location
                    </label>
                    <Field
                      as="select"
                      id="location"
                      name="location"
                      className="w-full px-4 py-2 border border-gray-300 rounded-lg shadow-sm focus:ring-indigo-500 focus:border-indigo-500 transition duration-200 ease-in-out"
                      onChange={(e) => {
                        setFieldValue('location', e.target.value);
                        setFieldValue('locationDetail', ''); // Reset sub-location
                        setFieldValue('roomNumber', ''); // Reset room number
                      }}
                    >
                      <option value="">Select Location</option>
                      <option value="Accra">Accra</option>
                      <option value="Legon UG">Legon UG</option>
                    </Field>
                    <ErrorMessage name="location" component="div" className="text-red-500 text-sm mt-1" />
                  </div>

                  {/* Conditional Sub-location Dropdown */}
                  {values.location === 'Legon UG' && (
                    <div>
                      <label htmlFor="locationDetail" className="block text-sm font-medium text-gray-700 mb-1 mt-3">
                        Hall of Residence
                      </label>
                      <Field
                        as="select"
                        id="locationDetail"
                        name="locationDetail"
                        className="w-full px-4 py-2 border border-gray-300 rounded-lg shadow-sm focus:ring-indigo-500 focus:border-indigo-500 transition duration-200 ease-in-out"
                      >
                        <option value="">Select Hall</option>
                        {legonHalls.map((hall) => (
                          <option key={hall} value={hall}>
                            {hall}
                          </option>
                        ))}
                      </Field>
                      <ErrorMessage name="locationDetail" component="div" className="text-red-500 text-sm mt-1" />
                    </div>
                  )}

                  {values.location === 'Accra' && (
                    <div>
                      <label htmlFor="locationDetail" className="block text-sm font-medium text-gray-700 mb-1 mt-3">
                        City/Town in Accra
                      </label>
                      <Field
                        as="select"
                        id="locationDetail"
                        name="locationDetail"
                        className="w-full px-4 py-2 border border-gray-300 rounded-lg shadow-sm focus:ring-indigo-500 focus:border-indigo-500 transition duration-200 ease-in-out"
                      >
                        <option value="">Select City/Town</option>
                        {accraCitiesTowns.map((city) => (
                          <option key={city} value={city}>
                            {city}
                          </option>
                        ))}
                      </Field>
                      <ErrorMessage name="locationDetail" component="div" className="text-red-500 text-sm mt-1" />
                    </div>
                  )}

                  {/* Room Number (only required for Legon UG) */}
                  {values.location === 'Legon UG' && (
                    <div>
                      <label htmlFor="roomNumber" className="block text-sm font-medium text-gray-700 mb-1 mt-3">
                        Room Number
                      </label>
                      <Field
                        type="text"
                        id="roomNumber"
                        name="roomNumber"
                        className="w-full px-4 py-2 border border-gray-300 rounded-lg shadow-sm focus:ring-indigo-500 focus:border-indigo-500 transition duration-200 ease-in-out placeholder-gray-400"
                        placeholder="Eg. 101A"
                      />
                      <ErrorMessage name="roomNumber" component="div" className="text-red-500 text-sm mt-1" />
                    </div>
                  )}

                  <div>
                    <label htmlFor="phoneNumber" className="block text-sm font-medium text-gray-700 mb-1 mt-3">
                      Telephone Number
                    </label>
                    <Field
                      type="tel"
                      id="phoneNumber"
                      name="phoneNumber"
                      className="w-full px-4 py-2 border border-gray-300 rounded-lg shadow-sm focus:ring-indigo-500 focus:border-indigo-500 transition duration-200 ease-in-out placeholder-gray-400"
                      placeholder="Eg. +233 24 123 4567"
                    />
                    <ErrorMessage name="phoneNumber" component="div" className="text-red-500 text-sm mt-1" />
                  </div>
                </div>

                {/* Laundry Basket Size Selection Section */}
                <div className="bg-purple-50 p-4 rounded-xl shadow-inner border border-purple-200">
                  <h2 className="text-xl font-semibold text-purple-800 mb-4">Choose Basket Size</h2>
                  <div className="grid grid-cols-1 sm:grid-cols-3 gap-4">
                    {basketSizes.map((basket) => (
                      <div
                        key={basket.id}
                        onClick={() => {
                          setFieldValue('basketSize', basket.id);
                          setFieldValue('price', basket.price); // Set price dynamically
                        }}
                        className={`cursor-pointer border-2 rounded-xl p-4 flex flex-col items-center justify-center transition duration-300 ease-in-out transform hover:scale-105 hover:shadow-lg
                          ${values.basketSize === basket.id ? 'border-indigo-500 bg-indigo-50 shadow-md' : 'border-gray-200 bg-white'}
                        `}
                      >
                        <img
                          src={basket.imageUrl}
                          alt={`${basket.name} Laundry Basket`}
                          className="w-24 h-24 mb-3 rounded-lg object-cover"
                          onError={(e) => { e.target.onerror = null; e.target.src="https://placehold.co/100x100/CCCCCC/666666?text=Image+Error"; }}
                        />
                        <span className="text-lg font-medium text-gray-800">{basket.name}</span>
                        <span className="text-xl font-bold text-indigo-600 mt-1">GHS {basket.price.toFixed(2)}</span>
                      </div>
                    ))}
                  </div>
                  <ErrorMessage name="basketSize" component="div" className="text-red-500 text-sm mt-3 text-center" />
                  <ErrorMessage name="price" component="div" className="text-red-500 text-sm mt-1 text-center" />
                  {/* Display selected basket and price */}
                  {values.basketSize && (
                    <div className="mt-5 text-center text-lg font-semibold text-gray-700 p-3 bg-gray-100 rounded-lg border border-gray-200">
                      Selected: <span className="text-indigo-600">{basketSizes.find(b => b.id === values.basketSize)?.name}</span> - Total: <span className="text-green-600">GHS {values.price.toFixed(2)}</span>
                    </div>
                  )}
                  {!values.basketSize && (
                    <p className="mt-5 text-center text-gray-500 text-sm">Please select a basket size to see the price.</p>
                  )}
                </div>

                {/* Submit Button */}
                <button
                  type="submit"
                  disabled={isSubmitting}
                  className="w-full bg-indigo-600 text-white py-3 rounded-lg font-semibold text-lg shadow-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 transition duration-300 ease-in-out transform hover:scale-105 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  {isSubmitting ? 'Processing...' : 'Proceed to Payment'}
                </button>
              </Form>
            )}
          </Formik>
        )}

        {/* Payment Step */}
        {currentStep === 'payment' && (
          <Formik
            initialValues={initialPaymentValues}
            validationSchema={paymentValidationSchema}
            onSubmit={handlePaymentSubmit}
          >
            {({ values: paymentValues, isSubmitting }) => (
              <Form className="bg-green-50 p-6 rounded-xl shadow-inner border border-green-200">
                <h2 className="text-2xl font-bold text-green-800 mb-4 text-center">Payment Details</h2>
                <p className="text-center text-lg mb-6 text-gray-700">
                  A 50% deposit of{' '}
                  <span className="font-extrabold text-3xl text-green-600">
                    GHS {(initialFormValues.price / 2).toFixed(2)} {/* Use price from the submitted form data */}
                  </span>{' '}
                  is required to confirm your order.
                </p>

                <div className="space-y-4">
                  <div>
                    <label htmlFor="mobileMoneyNumber" className="block text-sm font-medium text-gray-700 mb-1">
                      Mobile Money Number
                    </label>
                    <Field
                      type="tel"
                      id="mobileMoneyNumber"
                      name="mobileMoneyNumber"
                      className="w-full px-4 py-2 border border-gray-300 rounded-lg shadow-sm focus:ring-green-500 focus:border-green-500 transition duration-200 ease-in-out placeholder-gray-400"
                      placeholder="Eg. 024xxxxxxx or +23324xxxxxxx"
                    />
                    <ErrorMessage name="mobileMoneyNumber" component="div" className="text-red-500 text-sm mt-1" />
                  </div>
                  <div>
                    <label htmlFor="network" className="block text-sm font-medium text-gray-700 mb-1">
                      Mobile Money Network
                    </label>
                    <Field
                      as="select"
                      id="network"
                      name="network"
                      className="w-full px-4 py-2 border border-gray-300 rounded-lg shadow-sm focus:ring-green-500 focus:border-green-500 transition duration-200 ease-in-out"
                    >
                      <option value="">Select Network</option>
                      {mobileMoneyNetworks.map((network) => (
                        <option key={network} value={network}>
                          {network}
                        </option>
                      ))}
                    </Field>
                    <ErrorMessage name="network" component="div" className="text-red-500 text-sm mt-1" />
                  </div>
                  <button
                    type="submit"
                    disabled={isSubmitting}
                    className="w-full bg-green-600 text-white py-3 rounded-lg font-semibold text-lg shadow-md hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 transition duration-300 ease-in-out transform hover:scale-105 disabled:opacity-50 disabled:cursor-not-allowed"
                  >
                    {isSubmitting ? 'Processing Payment...' : `Pay GHS ${(initialFormValues.price / 2).toFixed(2)}`}
                  </button>
                  <button
                    type="button"
                    onClick={() => setCurrentStep('form')}
                    className="w-full mt-3 bg-gray-300 text-gray-800 py-3 rounded-lg font-semibold text-lg shadow-md hover:bg-gray-400 focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-offset-2 transition duration-300 ease-in-out"
                  >
                    Back to Order Form
                  </button>
                </div>
              </Form>
            )}
          </Formik>
        )}

        {/* Confirmation Step */}
        {currentStep === 'confirmation' && (
          <div className="bg-indigo-50 p-6 rounded-xl shadow-inner border border-indigo-200 text-center">
            <svg
              className="mx-auto h-24 w-24 text-indigo-500"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth="2"
                d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"
              ></path>
            </svg>
            <h2 className="text-2xl font-bold text-indigo-800 mt-4 mb-2">Order Confirmed!</h2>
            <p className="text-lg text-gray-700 mb-4">
              Your laundry order has been successfully placed and the 50% deposit received.
            </p>
            <p className="text-md text-gray-600">
              You will be contacted shortly for pickup arrangements.
            </p>
            <button
              onClick={startNewOrder}
              className="w-full mt-6 bg-indigo-600 text-white py-3 rounded-lg font-semibold text-lg shadow-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 transition duration-300 ease-in-out transform hover:scale-105"
            >
              Start New Order
            </button>
          </div>
        )}
      </div>
    </div>
  );
};

export default App;
